{"ast":null,"code":"const API_URL = 'http://localhost:4000';\n\nasync function httpGetPlanets() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json(); // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/launches`); // Load launches, sort by flight number, and return as JSON.\n\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a, b) => {\n    //our front end makes the right request in a decending order for the flight numbers\n    return a.flightNumber - b.aflightNumber;\n  });\n}\n\nasync function httpSubmitLaunch(launch) {\n  // Making the POST into the SUBMIT function to GET or POST we need await function\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //the body should an object but a body needs a string to work so we use JSON.stringify\n      body: JSON.stringify(launch)\n    });\n  } catch (err) {\n    return {\n      ok: false\n    };\n  } // Submit given launch data to launch system.\n\n}\n\nasync function httpAbortLaunch(id) {\n  // Delete launch with given ID.\n  //we pass a template string ${id} to match the id of the aborted launch.\n  try {\n    return await fetch(`${API_URL}/launches/${id}`, {\n      method: 'delete'\n    }); //we include error handlers incase something wrong happens the user knows\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"sources":["/Users/obinnauzozie/Desktop/Node/NASA PLANET/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","fetchedLaunches","sort","a","b","flightNumber","aflightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","err","ok","httpAbortLaunch","id","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB;;AAEA,eAAeC,cAAf,GAAgC;AAC9B;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAZ,CAA5B;AACA,SAAO,MAAME,QAAQ,CAACE,IAAT,EAAb,CAH8B,CAI9B;AACD;;AAED,eAAeC,eAAf,GAAiC;AAC/B;AACA,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,CAA5B,CAF+B,CAG/B;;AACA,QAAMM,eAAe,GAAG,MAAMJ,QAAQ,CAACE,IAAT,EAA9B;AACA,SAAOE,eAAe,CAACC,IAAhB,CAAqB,CAACC,CAAD,EAAGC,CAAH,KAAS;AACnC;AACA,WAAOD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACE,aAA1B;AACD,GAHM,CAAP;AAID;;AAED,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC;AACtC;AACA,MAAI;AACH,WAAO,MAAMV,KAAK,CAAE,GAAEH,OAAQ,WAAZ,EAAwB;AACzCc,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgC;AAKzC;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AANmC,KAAxB,CAAlB;AAQA,GATD,CASE,OAAOM,GAAP,EAAY;AACZ,WAAO;AACLC,MAAAA,EAAE,EAAE;AADC,KAAP;AAGD,GAfqC,CAepC;;AACH;;AAED,eAAeC,eAAf,CAA+BC,EAA/B,EAAmC;AACjC;AACA;AACA,MAAI;AACH,WAAO,MAAMnB,KAAK,CAAE,GAAEH,OAAQ,aAAYsB,EAAG,EAA3B,EAA8B;AAC7CR,MAAAA,MAAM,EAAE;AADqC,KAA9B,CAAlB,CADG,CAIH;AACA,GALD,CAKE,OAAMK,GAAN,EAAW;AACXI,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,WAAO;AACLC,MAAAA,EAAE,EAAE;AADC,KAAP;AAGF;AACD;;AAGD,SACEnB,cADF,EAEEI,eAFF,EAGEO,gBAHF,EAIES,eAJF","sourcesContent":["const API_URL = 'http://localhost:4000';\n\nasync function httpGetPlanets() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n  // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/launches`);\n  // Load launches, sort by flight number, and return as JSON.\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a,b) => {\n    //our front end makes the right request in a decending order for the flight numbers\n    return a.flightNumber - b.aflightNumber;\n  })\n}\n\nasync function httpSubmitLaunch(launch) {\n  // Making the POST into the SUBMIT function to GET or POST we need await function\n  try {\n   return await fetch(`${API_URL}/launches`, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    //the body should an object but a body needs a string to work so we use JSON.stringify\n    body: JSON.stringify(launch),\n   });\n  } catch (err) {\n    return {\n      ok: false,\n    };\n  } // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {\n  // Delete launch with given ID.\n  //we pass a template string ${id} to match the id of the aborted launch.\n  try {\n   return await fetch(`${API_URL}/launches/${id}`, {\n      method: 'delete',\n   });\n   //we include error handlers incase something wrong happens the user knows\n  } catch(err) {\n    console.log(err);\n    return {\n      ok: false,\n   };\n }\n}\n\n\nexport {\n  httpGetPlanets,\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n};"]},"metadata":{},"sourceType":"module"}