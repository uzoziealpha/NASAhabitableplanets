{"ast":null,"code":"import _regeneratorRuntime from\"/Users/obinnauzozie/Desktop/Node/NASA PLANET/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/obinnauzozie/Desktop/Node/NASA PLANET/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var API_URL='http://localhost:8000';function httpGetPlanets(){return _httpGetPlanets.apply(this,arguments);}function _httpGetPlanets(){_httpGetPlanets=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"\".concat(API_URL,\"/planets\"));case 2:response=_context.sent;_context.next=5;return response.json();case 5:return _context.abrupt(\"return\",_context.sent);case 6:case\"end\":return _context.stop();}}},_callee);}));return _httpGetPlanets.apply(this,arguments);}function httpGetLaunches(){return _httpGetLaunches.apply(this,arguments);}function _httpGetLaunches(){_httpGetLaunches=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var response,fetchedLaunches;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"\".concat(API_URL,\"/launches\"));case 2:response=_context2.sent;_context2.next=5;return response.json();case 5:fetchedLaunches=_context2.sent;return _context2.abrupt(\"return\",fetchedLaunches.sort(function(a,b){//our front end makes the right request in a decending order for the flight numbers\nreturn a.flightNumber-b.aflightNumber;}));case 7:case\"end\":return _context2.stop();}}},_callee2);}));return _httpGetLaunches.apply(this,arguments);}function httpSubmitLaunch(_x){return _httpSubmitLaunch.apply(this,arguments);}function _httpSubmitLaunch(){_httpSubmitLaunch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(launch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return fetch(\"\".concat(API_URL,\"/launches\"),{method:\"post\",headers:{\"Content-Type\":\"application/json\"},//the body should an object but a body needs a string to work so we use JSON.stringify\nbody:JSON.stringify(launch)});case 3:return _context3.abrupt(\"return\",_context3.sent);case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",{ok:false});case 9:case\"end\":return _context3.stop();}}},_callee3,null,[[0,6]]);}));return _httpSubmitLaunch.apply(this,arguments);}function httpAbortLaunch(_x2){return _httpAbortLaunch.apply(this,arguments);}function _httpAbortLaunch(){_httpAbortLaunch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return fetch(\"\".concat(API_URL,\"/launches/\").concat(id),{method:'delete'});case 3:return _context4.abrupt(\"return\",_context4.sent);case 6:_context4.prev=6;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);return _context4.abrupt(\"return\",{ok:false});case 10:case\"end\":return _context4.stop();}}},_callee4,null,[[0,6]]);}));return _httpAbortLaunch.apply(this,arguments);}export{httpGetPlanets,httpGetLaunches,httpSubmitLaunch,httpAbortLaunch};","map":{"version":3,"sources":["/Users/obinnauzozie/Desktop/Node/NASA PLANET/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","fetch","response","json","httpGetLaunches","fetchedLaunches","sort","a","b","flightNumber","aflightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","ok","httpAbortLaunch","id","console","log"],"mappings":"iVAAA,GAAMA,CAAAA,OAAO,CAAG,uBAAhB,C,QAEeC,CAAAA,c,oJAAf,sKAEyBC,CAAAA,KAAK,WAAIF,OAAJ,aAF9B,QAEQG,QAFR,qCAGeA,CAAAA,QAAQ,CAACC,IAAT,EAHf,6G,yDAOeC,CAAAA,e,uJAAf,4LAEyBH,CAAAA,KAAK,WAAIF,OAAJ,cAF9B,QAEQG,QAFR,uCAIgCA,CAAAA,QAAQ,CAACC,IAAT,EAJhC,QAIQE,eAJR,iDAKSA,eAAe,CAACC,IAAhB,CAAqB,SAACC,CAAD,CAAGC,CAAH,CAAS,CACnC;AACA,MAAOD,CAAAA,CAAC,CAACE,YAAF,CAAiBD,CAAC,CAACE,aAA1B,CACD,CAHM,CALT,0D,0DAWeC,CAAAA,gB,4JAAf,kBAAgCC,MAAhC,8JAGgBX,CAAAA,KAAK,WAAIF,OAAJ,cAAwB,CACzCc,MAAM,CAAE,MADiC,CAEzCC,OAAO,CAAE,CACP,eAAgB,kBADT,CAFgC,CAKzC;AACAC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf,CANmC,CAAxB,CAHrB,qJAYW,CACLM,EAAE,CAAE,KADC,CAZX,uE,2DAkBeC,CAAAA,e,0JAAf,kBAA+BC,EAA/B,8JAIgBnB,CAAAA,KAAK,WAAIF,OAAJ,sBAAwBqB,EAAxB,EAA8B,CAC7CP,MAAM,CAAE,QADqC,CAA9B,CAJrB,oHASIQ,OAAO,CAACC,GAAR,eATJ,iCAUW,CACLJ,EAAE,CAAE,KADC,CAVX,wE,kDAiBA,OACElB,cADF,CAEEI,eAFF,CAGEO,gBAHF,CAIEQ,eAJF","sourcesContent":["const API_URL = 'http://localhost:8000';\n\nasync function httpGetPlanets() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n  // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/launches`);\n  // Load launches, sort by flight number, and return as JSON.\n  const fetchedLaunches = await response.json();\n  return fetchedLaunches.sort((a,b) => {\n    //our front end makes the right request in a decending order for the flight numbers\n    return a.flightNumber - b.aflightNumber;\n  })\n}\n\nasync function httpSubmitLaunch(launch) {\n  // Making the POST into the SUBMIT function to GET or POST we need await function\n  try {\n   return await fetch(`${API_URL}/launches`, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    //the body should an object but a body needs a string to work so we use JSON.stringify\n    body: JSON.stringify(launch),\n   });\n  } catch (err) {\n    return {\n      ok: false,\n    };\n  } // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {\n  // Delete launch with given ID.\n  //we pass a template string ${id} to match the id of the aborted launch.\n  try {\n   return await fetch(`${API_URL}/launches/${id}`, {\n      method: 'delete',\n   });\n   //we include error handlers incase something wrong happens the user knows\n  } catch(err) {\n    console.log(err);\n    return {\n      ok: false,\n   };\n }\n}\n\n\nexport {\n  httpGetPlanets,\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n};"]},"metadata":{},"sourceType":"module"}